name='Draw',frame=~Season)%>%
add_trace(y = ~L, type = 'bar',
text = ~L, hoverinfo="text",
marker = list(color = '#969696'),
# marker = list(color = '#525252',
#               line = list(color = 'rgb(8,48,107)', width = 1.5)),
name='Loss',frame=~Season)%>%
add_trace(y = ~P, type = 'bar',
text = ~P, hoverinfo="text",
marker = list(color = '#8c6bb1'),
# marker = list(color = '#fd8d3c',
#               line = list(color = 'rgb(8,48,107)', width = 1.5)),
name='Total',frame=~Season)%>%
layout(xaxis=list(title="Game Type"),
yaxis=list(title="Number of Games", dtick = 5, tick0 = 0, tickmode = "linear"))
bar_scoredata_base_gamescore_plot<-bar_scoredata_base%>%
add_trace(y = ~GF, type = 'bar',
text = ~GF, hoverinfo="text",
marker = list(color = '#41ab5d'),
# marker = list(color = '#238b45',
#               line = list(color = 'rgb(8,48,107)', width = 1.5)),
name='Goals Scored',frame=~Season)%>%
add_trace(y = ~GA, type = 'bar',
text = ~GA, hoverinfo="text",
marker = list(color = '#8c510a'),
# marker = list(color = '#000000',
#               line = list(color = 'rgb(8,48,107)', width = 1.5)),
name='Goals Against',frame=~Season)%>%
add_trace(y = ~GD, type = 'bar',
text = ~GD, hoverinfo="text",
marker = list(color = '#e7298a'),
# marker = list(color = '#fed976',
#               line = list(color = 'rgb(8,48,107)', width = 1.5)),
name='Goals Difference',frame=~Season)%>%
layout(xaxis=list(title="Game Type"),
yaxis=list(title="Number of Goals", dtick = 10, tick0 = -50, tickmode = "linear"))
bar_base_home_plot<-
subplot( bar_scoredata_base_gamenumber_plot, bar_scoredata_base_gamescore_plot, nrows=2,
heights = c(0.4, 0.6),
titleX=TRUE, titleY = TRUE,margin=0.05,  shareX = TRUE, shareY = FALSE)
s<-subplot(bar_base_home_plot, scatter_base_plot, titleX=TRUE, titleY = TRUE, widths = c(0.3, 0.7),
margin=0.05)
layout(s)
all_positions_data<-readRDS(file = "all_positions_data.rds")
y_label_order<-c((all_positions_data%>%select(ord_number_Position, Position)%>%
group_by(ord_number_Position, Position)%>%
filter(row_number()==1)%>%
ungroup()%>%arrange(ord_number_Position))$Position)
all_positions_data$Position <- factor(all_positions_data$Position, levels = y_label_order)
all_positions_data_base<-all_positions_data%>%
filter(team==team_care)%>%
plot_ly(x=~Season, y=~Position, text=~ Position_label, hoverinfo="text",
colors=c("#e7298a", "#41ab5d", "#ec7014", "#6a51a3"))%>%
layout(xaxis=list(title="Season", dtick = 10, tick0 = 1892, tickmode = "linear"),
yaxis=list(title="Standing"))
all_positions_data_base_plot<-all_positions_data_base%>%
add_lines(line = list(color = '#525252', width = 2), showlegend=FALSE)%>%
add_markers(color = ~factor(Tier_label))
# add_lines(mode = 'lines+markers')
all_positions_data_base_plot
detailed_goals_final<-readRDS(file = "detailed_goals_final.rds")
detailed_goals_plot<-detailed_goals_final%>%
plot_ly(type = 'violin')
detailed_goals_plot <- detailed_goals_plot %>%
add_trace(
x = ~venue[detailed_goals_final$goaltype == 'Goals Scored'],
y = ~goals[detailed_goals_final$goaltype == 'Goals Scored'],
legendgroup = 'Goals Scored',
scalegroup = 'Goals Scored',
name = 'Goals Scored',
side = 'negative',
box = list(
visible = T
),
meanline = list(
visible = T
),
color = I("#238b45")
)%>%
add_trace(
x = ~venue[detailed_goals_final$goaltype == 'Goals Against'],
y = ~goals[detailed_goals_final$goaltype == 'Goals Against'],
legendgroup = 'Goals Against',
scalegroup = 'Goals Against',
name = 'Goals Against',
side = 'positive',
box = list(
visible = T
),
meanline = list(
visible = T
),
color = I("#e7298a")
)%>%
layout(
xaxis = list(
title = ""
),
yaxis = list(
title = "Goals",
zeroline = F,
dtick = 1, tick0 = 0, tickmode = "linear"
),
violingap = 0,
violingroupgap = 0,
violinmode = 'overlay'
)
detailed_goals_plot
mydf.final2<-readRDS(file = "mydf.final2.rds")
#text=sprintf("Preceding Season: %s<br>Succeeding Season: %s", pts.pglag, pts.pg)
ggg1 <- ggplot(mydf.final2, aes(pts.pglag, pts.pg)) +
geom_point(size=2, color="#737373",
aes(text=sprintf("Preceding Season(%s): %s<br> Succeeding Season (%s): %s",
Season-1, round(pts.pglag,5), Season, round(pts.pg, 5)))) +
stat_smooth(method="lm",se=F, lwd=1, color="#525252") +
theme_bw() +
xlab("Preceding Season") + ylab("Succeeding Season")
#+ ggtitle("Points per game")
ggg2 <- ggplot(mydf.final2, aes(GF.pglag, GF.pg)) +
geom_point(size=2, color="#41ab5d",
aes(text=sprintf("Preceding Season(%s): %s<br> Succeeding Season (%s): %s",
Season-1, round(GF.pglag,5), Season, round(GF.pg, 5)))) +
stat_smooth(method="lm",se=F, lwd=1, color="#238b45") +
theme_bw() +
xlab("Preceding Season") + ylab("Succeeding Season")
#+ ggtitle("Goals Scored per game")
ggg3 <- ggplot(mydf.final2, aes(GA.pglag, GA.pg)) +
geom_point(size=2, color="#fd8d3c",
aes(text=sprintf("Preceding Season(%s): %s<br> Succeeding Season (%s): %s",
Season-1, round(GA.pglag,5), Season, round(GA.pg, 5)))) +
stat_smooth(method="lm",se=F, lwd=1, color="#f16913") +
theme_bw() +
xlab("Preceding Season") + ylab("Succeeding Season")
#+ ggtitle("Goals Against per game")
ggg4 <- ggplot(mydf.final2, aes(GD.pglag, GD.pg)) +
geom_point(size=2, color="#807dba",
aes(text=sprintf("Preceding Season(%s): %s<br> Succeeding Season (%s): %s",
Season-1, round(GD.pglag,5), Season, round(GD.pg, 5)))) +
stat_smooth(method="lm",se=F, lwd=1, color="#6a51a3") +
theme_bw() +
xlab("Preceding Season") + ylab("Succeeding Season")
#+ ggtitle("Goals Difference per game")
subplot(toWebGL(ggplotly(ggg1,tooltip="text")),
toWebGL(ggplotly(ggg2,tooltip="text")),
toWebGL(ggplotly(ggg3,tooltip="text")), toWebGL(ggplotly(ggg4,tooltip="text")),
nrows=2,
margin=0.1)%>%
layout(annotations = list(
list(x = 0.1 , y = 1.05, text = "Points per game", showarrow = F, xref='paper', yref='paper'),
list(x = 0.92 , y = 1.05, text = "Goals Scored per game", showarrow = F, xref='paper', yref='paper'),
list(x = 0.06 , y = 0.45, text = "Goals Against per game", showarrow = F, xref='paper', yref='paper'),
list(x = 0.92 , y = 0.45, text = "Goals Difference per game", showarrow = F, xref='paper', yref='paper'))
)
mevstheworld_result_spread<-readRDS(file = "mevstheworld_result_spread.rds")
mevstheworld_result_spread<-highlight_key(mevstheworld_result_spread)
vs_team_result<-datatable(mevstheworld_result_spread,
colnames=c('vs. Team'='team_compare', 'Win'='Win', 'Draw'='Draw', 'Loss'='Loss',
'Goals Scored'='goal_me_sum', 'Goals Against'='goal_theworld_sum'),
extensions="Scroller", style="bootstrap", class="compact", width="100%",
options=list(deferRender=TRUE, scrollY=300, scroller=TRUE))
widgets<-bscols(filter_select("team_compare", "vs. Team", mevstheworld_result_spread,~team_compare))
bscols(widths=c(4,7), widgets, vs_team_result)
rmarkdown::render("index.Rmd")
View(england$tier)
View(england)
View(england)
View(addtitional_data)
# Calling all libraries
library(DT)
library(dplyr)
library(GGally)
library(plotly)
library(sf)
library(leaflet)
library(engsoccerdata)
library(tidyr)
library(maps)
library(mapdata)
library(varhandle)
library(crosstalk)
library(gridExtra)
library(dplyr)
load("england.rda")
load("deductions.rda")
england<-as_tibble(england)
##################################################################
# Function all score teams
all_score_team_new<-function(df=NULL,score=NULL,teamname=NULL){
if (is.null(score)){
tmp <- df[(df$home==teamname | df$visitor==teamname), ]
tmp <- tmp[order(tmp$Season),]
}
else{
temp<-strsplit(score,split="-")
score1<-paste(temp[[1]][2],temp[[1]][1],sep="-")
tmp <- df[(df$FT==score | df$FT==score1) & (df$home==teamname | df$visitor==teamname), ]
tmp <- tmp[order(tmp$Season),]
}
return(tmp)
}
##################################################################
# Calculate number of wins etc..
alltimerecord_new<-function (df=NULL, teamname=NULL) {
.<-home<-visitor<-hgoal<-vgoal<-goaldif<-FT<-GF<-GA<-GD<-P<-W<-D<-L<-Season<-division<-result<-maxgoal<-mingoal<-absgoaldif<-NULL
hrec<-df %>%
dplyr::filter(home==teamname)%>%
group_by(Season)%>%
dplyr::summarise(P = sum(result %in% c("H", "D", "A")), W=sum(result=="H"),
D=sum(result=="D"), L=sum(result=="A"),
GF = sum(hgoal), GA = sum(vgoal), GD=GF-GA)%>%
ungroup()%>%
mutate(GameType="Home")
vrec<-df %>%
dplyr::filter(visitor==teamname)%>%
group_by(Season)%>%
dplyr::summarise(P = sum(result %in% c("H", "D", "A")),  W=sum(result=="A"),
D=sum(result=="D"), L=sum(result=="H"),
GF = sum(vgoal), GA = sum(hgoal), GD=GF-GA)%>%
ungroup()%>%
mutate(GameType="Away")
arec<-df %>%
dplyr::filter(visitor==teamname | home==teamname)%>%
group_by(Season)%>%
dplyr::mutate(result=case_when(home==teamname & result=="H" ~ "W",
home==teamname & result=="A" ~ "L",
home==teamname & result=="D" ~ "D",
visitor==teamname & result=="H" ~ "L",
visitor==teamname & result=="A" ~ "W",
visitor==teamname & result=="D" ~ "D",
TRUE ~ "NA"
))%>%
dplyr::mutate(goals_scored=case_when(home==teamname~ hgoal, visitor==teamname~ vgoal))%>%
dplyr::mutate(goals_against=case_when(home==teamname~ vgoal, visitor==teamname~hgoal))%>%
dplyr::summarise(P = sum(result %in% c("W", "L", "D")),  W=sum(result=="W"),
D=sum(result=="D"), L=sum(result=="L"),
GF = sum(goals_scored), GA = sum(goals_against), GD=GF-GA)%>%
ungroup()%>%
mutate(GameType="Total")
temp<-rbind(hrec, vrec, arec)
#rownames(temp)<-c("home", "away", "total")
return(temp)
}
##################################################################
england_current_new <- function(){
home<-visitor<-hgoal<-vgoal<-goaldif<-FT<-Season<-division<-result<-NULL
url1 <- "https://www.11v11.com/competitions/premier-league/2021/matches/"
url2 <- "https://www.11v11.com/competitions/league-championship/2021/matches/"
url3 <- "https://www.11v11.com/competitions/league-one/2021/matches/"
url4 <- "https://www.11v11.com/competitions/league-two/2021/matches/"
x1 <- xml2::read_html(url1) %>% rvest::html_table(fill = TRUE)
x2 <- xml2::read_html(url2) %>% rvest::html_table(fill = TRUE)
x3 <- xml2::read_html(url3) %>% rvest::html_table(fill = TRUE)
x4 <- xml2::read_html(url4) %>% rvest::html_table(fill = TRUE)
make_data <- function(x){
x <- x[[1]][,1:4]
x <-x[grepl("([0-9]+).*$", x[,1]),]#get rid of months text
colnames(x)<-c("Date","home","FT","visitor")
x$Date <- as.character(as.Date(x$Date, format="%d %b %Y"))
x$Season <- 2020
x$FT <- gsub(":", "-", x$FT)
x <- x[nchar(x$FT)>1,]
hgvg <- matrix(unlist(strsplit(x$FT, "-")), ncol=2, byrow = T)
x$hgoal <- as.numeric(hgvg[,1])
x$vgoal <- as.numeric(hgvg[,2])
x$totgoal <- x$hgoal+x$vgoal
x$goaldif <- x$hgoal-x$vgoal
x$result <- ifelse(x$hgoal>x$vgoal, "H", ifelse(x$hgoal<x$vgoal, "A", "D"))
return(x)
}
x1d <- make_data(x1)
x2d <- make_data(x2)
x3d <- make_data(x3)
x4d <- make_data(x4)
x1d$division <- 1
x1d$tier <- 1
x2d$division <- 2
x2d$tier <- 2
x3d$division <- 3
x3d$tier <- 3
x4d$division <- 4
x4d$tier <- 4
xd <- rbind(x1d,x2d,x3d,x4d)
xd <- xd[colnames(engsoccerdata::england)]
xd %>%
dplyr::mutate(home = dplyr::case_when(
grepl("Brighton and Hove", home) ~ "Brighton & Hove Albion",
grepl("Cheltenham Town", home) ~ "Cheltenham",
grepl("Stevenage", home) ~ "Stevenage Borough",
grepl("Harrogate Town", home) ~ "Harrogate Town A.F.C.",
grepl("Macclesfield Town", home) ~ "Macclesfield",
grepl("Yeovil", home) ~ "Yeovil",
TRUE ~ home
)) %>%
dplyr::mutate(visitor = dplyr::case_when(
grepl("Brighton and Hove", visitor) ~ "Brighton & Hove Albion",
grepl("Cheltenham Town", visitor) ~ "Cheltenham",
grepl("Stevenage", visitor) ~ "Stevenage Borough",
grepl("Macclesfield Town", visitor) ~ "Macclesfield",
grepl("Harrogate Town", visitor) ~ "Harrogate Town A.F.C.",
grepl("Yeovil", visitor) ~ "Yeovil",
TRUE ~ visitor
)) -> xd
return(xd)
}
##########################################################
maketable_eng_new <- function(df=NULL, Season=NULL, tier=NULL, division=NULL, penalties=FALSE){
newPts<-penalty<-GA<-GF<-ga<-gf<-gd<-GD<-W<-Pts<-.<-Date<-home<-team<-visitor<-hgoal<-opp<-vgoal<-goaldif <-FT<-result<-maxgoal<-mingoal<-absgoaldif<-NULL
#deductions <- deductions
df<-df%>%filter(Season==Season)%>%
filter(tier==tier)
if (nrow(df)==0) {
df
}
else {
if(!is.null(division)){ df <-  df[df$division==division,] }
#1981/82 - three points for a win introduced.
if(Season>=1981){
xx <- maketable(df,Season,tier,pts=3)
if(any(xx$team %in% deductions$team & Season %in% deductions$Season)==T && penalties==T){
penalty <- deductions[deductions$team %in% xx$team & deductions$Season %in% Season,]
# need if penalties has no rows ... just return xx
if(nrow(penalty)>0){
penalty$newPts <- xx$Pts[match(penalty$team,xx$team)]-penalty$deduction
newPts <- penalty$newPts[match(xx$team,penalty$team)]
xx$Pts <- ifelse(!is.na(newPts), newPts, xx$Pts)
# rearrange by same rules as before...
xx %>%
dplyr::arrange(-Pts, -gd, -gf) %>%
dplyr::mutate(Pos = rownames(.)) %>%
as.data.frame() -> xx
}
}
} else
#1976/77 - 1980/81 goal difference used in all tiers
if(Season>=1976 & Season<1981){
xx <- maketable(df,Season,tier,pts=2)
} else
#1974/75 and before goal average.- the number of goals scored divided by the number of goals conceded
if(Season<=1974){
xx <- maketable(df,Season,tier,pts=2)
xx <- xx %>% dplyr::mutate(gd=gf/ga) %>% dplyr::arrange(-Pts,-gd,-gf) %>% dplyr::mutate(Pos=1:nrow(xx))
if(any(xx$team %in% deductions$team & Season %in% deductions$Season)==T && penalties==T){
penalty <- deductions[deductions$team %in% xx$team & deductions$Season %in% Season,]
# need if penalties has no rows ... just return xx
if(nrow(penalty)>0){
penalty$newPts <- xx$Pts[match(penalty$team,xx$team)]-penalty$deduction
newPts <- penalty$newPts[match(xx$team,penalty$team)]
xx$Pts <- ifelse(!is.na(newPts), newPts, xx$Pts)
# rearrange by same rules as before...
xx %>%
dplyr::arrange(-Pts,-gd,-gf) %>%
dplyr::mutate(Pos=1:nrow(xx)) %>%
as.data.frame() -> xx
}
}
}  else
if(Season==1975 & tier>1){
xx <- maketable(df,Season,tier,pts=2)
xx <- xx %>% dplyr::mutate(gd=gf/ga) %>% dplyr::arrange(-Pts,-gd,-gf) %>% dplyr::mutate(Pos=1:nrow(xx))
}  else
if(Season==1975 & tier==1){
xx <- maketable(df,Season,tier,pts=2)
}
return(xx)
}
}
#######################################################
mevstheworld<-function(df=england, team_compare=theworld){
temp<- df %>%
dplyr::filter(home==team_care & visitor==team_compare | home==team_compare & visitor==team_care)%>%
mutate(ResultType=case_when(home==team_care & result=="H" ~ "Win",
home==team_care & result=="A" ~ "Loss",
home==team_care & result=="D" ~ "Draw",
!(home==team_care) & result=="H" ~ "Loss",
!(home==team_care) & result=="A" ~ "Win",
!(home==team_care) & result=="D" ~ "Draw",
TRUE ~ "Check the data"
))%>%
mutate(me_vs_theworld=ifelse(home==team_care, paste0(home, " vs. ", visitor),
paste0(visitor, " vs. ", home)))%>%
mutate(goal_me=ifelse(home==team_care, hgoal,vgoal))%>%
mutate(goal_theworld=ifelse(home==team_care, vgoal,hgoal))%>%
mutate(team_compare=team_compare)%>%
select(Date, Season, me_vs_theworld, team_compare, goal_me, goal_theworld, ResultType)
if (nrow(temp)==0) {
temp1<-tibble(me_vs_theworld=paste0(team_care, " vs. ", team_compare),
team_compare=team_compare,
goal_me_sum="N/A", goal_theworld_sum="N/A",
ResultType="Win", no_Result= "N/A")
temp2<-tibble(me_vs_theworld=paste0(team_care, " vs. ", team_compare),
team_compare=team_compare,
goal_me_sum="N/A", goal_theworld_sum="N/A",
ResultType="Draw", no_Result= "N/A")
temp3<-tibble(me_vs_theworld=paste0(team_care, " vs. ", team_compare),
team_compare=team_compare,
goal_me_sum="N/A", goal_theworld_sum="N/A",
ResultType="Loss", no_Result= "N/A")
temp_sum_spread <-rbind(temp1, temp2, temp3)
}
else
{
temp_sum<-temp%>%
mutate(goal_me_sum=sum(goal_me))%>%
mutate(goal_theworld_sum=sum(goal_theworld))%>%
group_by(me_vs_theworld, team_compare, goal_me_sum, goal_theworld_sum, ResultType)%>%
mutate(no_Result=n_distinct(Date))%>%
ungroup()%>%
group_by(me_vs_theworld, goal_me_sum, goal_theworld_sum, ResultType, no_Result)%>%
filter(row_number()==1)%>%
ungroup()%>%
select(me_vs_theworld, team_compare, goal_me_sum, goal_theworld_sum, ResultType, no_Result)%>%
mutate(goal_me_sum=as.character(goal_me_sum),
goal_theworld_sum=as.character(goal_theworld_sum),
no_Result=as.character(no_Result)
)
}
}
addtitional_data<-england_current_new()%>%
mutate(division=as.character(division))
source("01_Scores_data_processing.R")
source("02_Standings_data_processing.R")
source("03_Goal_Distribution_data_processing.R")
source("04_Performance_data_processing.R")
source("05_vstheworld_data_processing.R")
rmarkdown::render("index.Rmd")
rmarkdown::render("index.Rmd")
View(all_positions_data)
View(all_positions)
#  We need to know all the combination of Season and tier
all_tier<- sort(unique(england$tier))
all_Season<-list()
all_positions<-list()
for (val in all_tier) {
temp<-sort(unique((england%>%filter(tier==val))$Season))
temp_data<-lapply(temp, function(x) {
data_use <-maketable_eng_new(england, Season = x, tier=val)%>%
mutate(Season=x)%>%
mutate(tier=val)%>%
mutate(Pos=as.character(Pos))
})
all_positions[[length(all_positions) + 1]]<-bind_rows(temp_data)
}
all_positions<-as_tibble(bind_rows(all_positions))
# Let's make a dummy variable for Y axis to show Division 4 is lower than Division 3 etc
all_positions_yaxis_tier<-sort(unique(all_positions$tier))
all_positions_yaxis_Pos<-sort(unique(all_positions$Pos))
all_positions_yaxis<-all_positions%>%select(tier, Pos)%>%
mutate(tier_n=as.numeric(tier))%>%
mutate(Pos_n=as.numeric(Pos))%>%
group_by(tier, Pos)%>%
filter(row_number()==1)%>%
ungroup()%>%
arrange(desc(tier_n), desc(Pos_n))%>%
mutate(ord_number_Position=row_number())%>%
mutate(Position=paste0("Tier ", tier, " - Standing ", Pos))
all_positions_data<-all_positions%>%
left_join(all_positions_yaxis, by=c("tier", "Pos"))%>%
mutate(Position_label=paste0("Season ", Season, " - ", Position, " (Points: ", Pts,
"/W: ", W,  "/D: ", D, "/L: ", L, "/GF: ", gf, "/GA: ",
ga, "/GAvg: ", gd, ")"))%>%
mutate(Tier_label=case_when(tier==1 ~ "Premier League",
tier==2 ~ "Championship",
tier==3 ~ "League One",
tier==4 ~ "League Two"))
saveRDS(all_positions_data, file = "all_positions_data.rds")
View(england)
#############################################################
# Process the data for scores
addtitional_data<-england_current_new()%>%
mutate(division=as.character(division))
england<-bind_rows(england,addtitional_data)%>%
group_by(Season, Date, home, visitor, hgoal, vgoal, result)%>%
filter(row_number()==1)%>%
ungroup()
#  We need to know all the combination of Season and tier
all_tier<- sort(unique(england$tier))
all_Season<-list()
all_positions<-list()
for (val in all_tier) {
temp<-sort(unique((england%>%filter(tier==val))$Season))
temp_data<-lapply(temp, function(x) {
data_use <-maketable_eng_new(england, Season = x, tier=val)%>%
mutate(Season=x)%>%
mutate(tier=val)%>%
mutate(Pos=as.character(Pos))
})
all_positions[[length(all_positions) + 1]]<-bind_rows(temp_data)
}
all_positions<-as_tibble(bind_rows(all_positions))
# Let's make a dummy variable for Y axis to show Division 4 is lower than Division 3 etc
all_positions_yaxis_tier<-sort(unique(all_positions$tier))
all_positions_yaxis_Pos<-sort(unique(all_positions$Pos))
all_positions_yaxis<-all_positions%>%select(tier, Pos)%>%
mutate(tier_n=as.numeric(tier))%>%
mutate(Pos_n=as.numeric(Pos))%>%
group_by(tier, Pos)%>%
filter(row_number()==1)%>%
ungroup()%>%
arrange(desc(tier_n), desc(Pos_n))%>%
mutate(ord_number_Position=row_number())%>%
mutate(Position=paste0("Tier ", tier, " - Standing ", Pos))
all_positions_data<-all_positions%>%
left_join(all_positions_yaxis, by=c("tier", "Pos"))%>%
mutate(Position_label=paste0("Season ", Season, " - ", Position, " (Points: ", Pts,
"/W: ", W,  "/D: ", D, "/L: ", L, "/GF: ", gf, "/GA: ",
ga, "/GAvg: ", gd, ")"))%>%
mutate(Tier_label=case_when(tier==1 ~ "Premier League",
tier==2 ~ "Championship",
tier==3 ~ "League One",
tier==4 ~ "League Two"))
saveRDS(all_positions_data, file = "all_positions_data.rds")
View(all_positions)
